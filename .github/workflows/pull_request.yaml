name: Pull Request

on:
  pull_request:
    branches:
      - master
    paths:
      - '**'
      - '!.markdownlint.yaml'
      - '!.vale.ini'
      - '!Dockerfile-docs'
      - '!docs-nginx.conf'
      - '!docs/**'
      - '!theme_common'
      - '!theme_override'

env:
  DOCKER_FILE_PATH: Dockerfile
  DOCKER_UBI_FILE_PATH: Dockerfile.ubi
  KUBERNETES_VERSION: "1.19.0"
  KIND_VERSION: "0.17.0"
  REGISTRY: ghcr.io

jobs:
  qa:
    uses: stakater/.github/.github/workflows/pull_request_doc_qa.yaml@v0.0.97
    with:
      MD_CONFIG: .github/md_config.json
      DOC_SRC: README.md
      MD_LINT_CONFIG: .markdownlint.yaml

  build:

    permissions:
      contents: read

    runs-on: ubuntu-latest
    name: Build
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        ref: ${{github.event.pull_request.head.sha}}
        fetch-depth: 0

    # Setting up helm binary
    - name: Set up Helm
      uses: azure/setup-helm@v4

    - name: Helm chart unit tests
      uses: d3adb5/helm-unittest-action@v2
      with:
        charts: deployments/kubernetes/chart/reloader

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        check-latest: true
        cache: true

    # Get highest tag and remove any suffixes with '-'
    - name: Get Highest tag
      id: highest_tag
      run: |
        highest=$(git tag -l --sort -version:refname | head -n 1)
        echo "tag=${highest%%-*}" >> $GITHUB_OUTPUT

    - name: Install Dependencies
      run: |
        make install

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v5
      with:
        version: latest
        only-new-issues: false
        args: --timeout 10m

    - name: Helm Lint
      run: |
        cd deployments/kubernetes/chart/reloader
        helm lint

    - name: Install kubectl
      run: |
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl"
        sudo install ./kubectl /usr/local/bin/ && rm kubectl
        kubectl version --short --client
        kubectl version --short --client | grep -q ${KUBERNETES_VERSION}

    - name: Install Kind
      run: |
        curl -L -o kind https://github.com/kubernetes-sigs/kind/releases/download/v${KIND_VERSION}/kind-linux-amd64
        sudo install ./kind /usr/local/bin && rm kind
        kind version
        kind version | grep -q ${KIND_VERSION}

    - name: Create Kind Cluster
      run: |
        kind create cluster
        kubectl cluster-info

    - name: Test
      run: make test

    - name: Generate Tags
      id: generate_tag
      run: |
        sha=${{ github.event.pull_request.head.sha }}
        tag="SNAPSHOT-PR-${{ github.event.pull_request.number }}-${sha:0:8}"
        ubi_tag="SNAPSHOT-PR-${{ github.event.pull_request.number }}-UBI-${sha:0:8}"
        echo "GIT_TAG=$(echo ${tag})" >> $GITHUB_OUTPUT
        echo "GIT_UBI_TAG=$(echo ${ubi_tag})" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate image repository path for ghcr registry
      run: |
        echo GHCR_IMAGE_REPOSITORY=${{env.REGISTRY}}/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

    # To identify any broken changes in dockerfiles or dependencies

    - name: Build Docker Image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ env.DOCKER_FILE_PATH  }}
        pull: true
        push: false
        build-args: BUILD_PARAMETERS=${{ env.BUILD_PARAMETERS }}
        cache-to: type=inline
        platforms: linux/amd64,linux/arm,linux/arm64
        tags: |
          ${{ env.GHCR_IMAGE_REPOSITORY }}:${{ steps.generate_tag.outputs.GIT_TAG }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.clone_url }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build Docker UBI Image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ env.DOCKER_UBI_FILE_PATH  }}
        pull: true
        push: false
        build-args: |
          BUILD_PARAMETERS=${{ env.BUILD_PARAMETERS }}
          BUILDER_IMAGE=${{ env.GHCR_IMAGE_REPOSITORY }}:${{ steps.highest_tag.outputs.tag }}
        cache-to: type=inline
        platforms: linux/amd64,linux/arm64
        tags: |
          ${{ env.GHCR_IMAGE_REPOSITORY }}:${{ steps.generate_tag.outputs.GIT_UBI_TAG }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.clone_url }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}
